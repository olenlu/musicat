from aiogram import Router
from yt_dlp import YoutubeDL
from aiogram.types import Message, FSInputFile
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.types import InputFile
import os
import tempfile
import asyncio

from app.utils import search_youtube_audio_by_name


router = Router()
user_search_results = {}

@router.message(CommandStart())
async def cmd_start(message:Message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è~')


@router.message(Command('help'))
async def cmd_help(message:Message):
    photo = FSInputFile("app/static/bot.png")
    await message.answer_photo(
        photo=photo,
        caption=(
            'üìñ *–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞*\n\n'
            '1. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏/–ø–æ–¥–∫–∞—Å—Ç–∞/–≤–∏–¥–µ–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É—Å–ª—ã—à–∞—Ç—å –≤ –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç–µ.\n'
            '2. –ë–æ—Ç –ø—Ä–∏—à–ª—ë—Ç –≤–∞–º 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞.\n'
            '3. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É –≤–∏–¥–∞ /1, /2 –∏ —Ç.–¥., —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—ã–π —Ç—Ä–µ–∫.\n'
            '4. –û–∂–∏–¥–∞–π—Ç–µ ‚Äî –±–æ—Ç –ø—Ä–∏—à–ª—ë—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª üéß'
        ),
        parse_mode='Markdown'
    )


@router.message(lambda m: m.text and m.text.startswith("/") and m.text[1:].isdigit())
async def download_song(message: Message, state: FSMContext):
    # user_id = message.from_user.id
    # results = user_search_results.get(user_id)
    results = (await state.get_data())["results"]
    if not results:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞.")
        return
    try:
        num = int(message.text[-1]) - 1
        video = results[num]
    except (ValueError, IndexError):
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä.")
        return
    
    await message.answer(f"–°–∫–∞—á–∏–≤–∞—é: {video['title']}...")

    url = f"https://www.youtube.com/watch?v={video['id']}"

    ydl_opts = {
        'format': 'bestaudio/best',
        'outtmpl': os.path.join(tempfile.gettempdir(), '%(title)s.%(ext)s'),
        'quiet': True,
        'postprocessors': [{
            'key': 'FFmpegExtractAudio',
            'preferredcodec': 'mp3',
            'preferredquality': '192',
        }],
    }

    def download_audio():
        with YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            return ydl.prepare_filename(info).replace(info['ext'], 'mp3')


    audio_path = await asyncio.to_thread(download_audio)
    print(audio_path)
    audio_file = FSInputFile(audio_path)
    await message.answer_audio(audio=audio_file, title=video['title'])
    # os.remove(audio_path)





@router.message()
async def search_song(message: Message, state: FSMContext):
    await message.answer("–£–∂–µ –∏—â—É!")
    title = message.text
    results = await search_youtube_audio_by_name(title)
    if not results: 
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –º–æ–≥—É –Ω–∏—á–µ–≥–æ –Ω–∞–π—Ç–∏ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É\n–ú–æ–∂–µ—Ç –ø–æ–∏—â–µ–º —á—Ç–æ-–Ω–∏–±—É–¥—å –¥—Ä—É–≥–æ–µ?")
    await state.update_data(results=results)
    # user_search_results[message.from_user.id] = results
    sms = ''
    for i, video in enumerate(results,1):
        sms+=f"/{i}. {video['title']}\n{video['url']}\n\n"
    await message.answer(sms, disable_web_page_preview=True)